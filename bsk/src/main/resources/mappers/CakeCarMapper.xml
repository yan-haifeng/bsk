<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zime.bsk.dao.CakeCarMapper">
  <resultMap id="BaseResultMap" type="com.zime.bsk.entity.CakeCar">
    <id column="car_id" jdbcType="INTEGER" property="carId" />
    <result column="car_userid" jdbcType="INTEGER" property="carUserid" />
    <result column="car_cakeid" jdbcType="INTEGER" property="carCakeid" />
    <result column="car_specsid" jdbcType="INTEGER" property="carSpecsid" />
    <result column="car_num" jdbcType="INTEGER" property="carNum" />
    <result column="car_state" jdbcType="INTEGER" property="carState" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    car_id, car_userid, car_cakeid, car_specsid, car_num, car_state
  </sql>
  <select id="selectByExample" parameterType="com.zime.bsk.entity.CakeCarExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from cakecar
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from cakecar
    where car_id = #{carId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from cakecar
    where car_id = #{carId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zime.bsk.entity.CakeCarExample">
    delete from cakecar
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zime.bsk.entity.CakeCar">
    insert into cakecar (car_id, car_userid, car_cakeid, 
      car_specsid, car_num, car_state
      )
    values (#{carId,jdbcType=INTEGER}, #{carUserid,jdbcType=INTEGER}, #{carCakeid,jdbcType=INTEGER}, 
      #{carSpecsid,jdbcType=INTEGER}, #{carNum,jdbcType=INTEGER}, #{carState,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zime.bsk.entity.CakeCar">
    insert into cakecar
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="carId != null">
        car_id,
      </if>
      <if test="carUserid != null">
        car_userid,
      </if>
      <if test="carCakeid != null">
        car_cakeid,
      </if>
      <if test="carSpecsid != null">
        car_specsid,
      </if>
      <if test="carNum != null">
        car_num,
      </if>
      <if test="carState != null">
        car_state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="carId != null">
        #{carId,jdbcType=INTEGER},
      </if>
      <if test="carUserid != null">
        #{carUserid,jdbcType=INTEGER},
      </if>
      <if test="carCakeid != null">
        #{carCakeid,jdbcType=INTEGER},
      </if>
      <if test="carSpecsid != null">
        #{carSpecsid,jdbcType=INTEGER},
      </if>
      <if test="carNum != null">
        #{carNum,jdbcType=INTEGER},
      </if>
      <if test="carState != null">
        #{carState,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zime.bsk.entity.CakeCarExample" resultType="java.lang.Long">
    select count(*) from cakecar
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update cakecar
    <set>
      <if test="record.carId != null">
        car_id = #{record.carId,jdbcType=INTEGER},
      </if>
      <if test="record.carUserid != null">
        car_userid = #{record.carUserid,jdbcType=INTEGER},
      </if>
      <if test="record.carCakeid != null">
        car_cakeid = #{record.carCakeid,jdbcType=INTEGER},
      </if>
      <if test="record.carSpecsid != null">
        car_specsid = #{record.carSpecsid,jdbcType=INTEGER},
      </if>
      <if test="record.carNum != null">
        car_num = #{record.carNum,jdbcType=INTEGER},
      </if>
      <if test="record.carState != null">
        car_state = #{record.carState,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update cakecar
    set car_id = #{record.carId,jdbcType=INTEGER},
      car_userid = #{record.carUserid,jdbcType=INTEGER},
      car_cakeid = #{record.carCakeid,jdbcType=INTEGER},
      car_specsid = #{record.carSpecsid,jdbcType=INTEGER},
      car_num = #{record.carNum,jdbcType=INTEGER},
      car_state = #{record.carState,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zime.bsk.entity.CakeCar">
    update cakecar
    <set>
      <if test="carUserid != null">
        car_userid = #{carUserid,jdbcType=INTEGER},
      </if>
      <if test="carCakeid != null">
        car_cakeid = #{carCakeid,jdbcType=INTEGER},
      </if>
      <if test="carSpecsid != null">
        car_specsid = #{carSpecsid,jdbcType=INTEGER},
      </if>
      <if test="carNum != null">
        car_num = #{carNum,jdbcType=INTEGER},
      </if>
      <if test="carState != null">
        car_state = #{carState,jdbcType=INTEGER},
      </if>
    </set>
    where car_id = #{carId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zime.bsk.entity.CakeCar">
    update cakecar
    set car_userid = #{carUserid,jdbcType=INTEGER},
      car_cakeid = #{carCakeid,jdbcType=INTEGER},
      car_specsid = #{carSpecsid,jdbcType=INTEGER},
      car_num = #{carNum,jdbcType=INTEGER},
      car_state = #{carState,jdbcType=INTEGER}
    where car_id = #{carId,jdbcType=INTEGER}
  </update>
</mapper>